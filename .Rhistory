}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
update(model, n.iter = 1000)
terms_samples = coda.samples(model,
variable.names = c("b0","sd","b", "c"),
n.iter = 1000 * 13, thin = 13)
dic_terms = coda.samples(model,
variable.names = c("b0","sd","b", "c"),
n.iter = 1000 * 13, thin = 13)
print(dic_terms)
dic_terms = dic.samples(model,
variable.names = c("b0","sd","b", "c"),
n.iter = 1000 * 13, thin = 13)
print(dic_terms)
print(lin_dic
)
data = list(x = lin_x_scaled[,-1], y = y,
n = nrow(lin_x_scaled),
p = ncol(lin_x_scaled[,-1]),
n_subjects = length(unique(lin_x_scaled[,1])),
subject = lin_x_scaled$id)
# JAG model (as a string)
model_string = "
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (k in 1:n_subjects) {
c[k] ~ dnorm(0, tau_hier)
}
tau ~ dgamma(0.001, 0.001)
tau_hier ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
sd_hier = pow(tau_hier, -0.5)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau) T(0,60)
mu[i] = b0 + inprod(b, x[i,]) + c[subjects[i]]
}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
### Modelling (AR(1))
data = list(y = score_mat, x1 = imi_mat, x2 = dmi_mat, x3 = female_mat,
x4 = dep_mat, nrow = nrow(score_mat), ncol = ncol(score_mat),
p = 4)
scaled_dmi = (Reisby$lnimi - mean(Reisby$lnimi))/sd(Reisby$lnimi)
scaled_imi = (Reisby$lndmi - mean(Reisby$lndmi))/sd(Reisby$lndmi)
SReisby = Reisby[, -4:-5]
SReisby$scaled_dmi = scaled_dmi
SReisby$scaled_imi = scaled_imi
weekCount = count(SReisby, "id")
full_ids = subset(weekCount, freq == max(SReisby$week) + 1)
sub_SReisby = subset(SReisby, id %in% full_ids$id)
ids = unique(sub_SReisby$id)
score_mat = matrix(nrow = length(ids),
ncol = max(sub_SReisby$week) + 1)
imi_mat = matrix(nrow = length(ids),
ncol = max(sub_SReisby$week) + 1)
dmi_mat = matrix(nrow = length(ids),
ncol = max(sub_SReisby$week) + 1)
female_mat = matrix(nrow = length(ids),
ncol = max(sub_SReisby$week) + 1)
dep_mat = matrix(nrow = length(ids),
ncol = max(sub_SReisby$week) + 1)
for(i in 1:length(ids)){
for(j in 0:max(sub_SReisby$week)){
score_mat[i, j+1] = subset(sub_SReisby, id == ids[i] & week == j)$hd
imi_mat[i, j+1] = subset(sub_SReisby, id == ids[i] & week == j)$scaled_imi
dmi_mat[i, j+1] = subset(sub_SReisby, id == ids[i] & week == j)$scaled_dmi
female_mat[i, j+1] = subset(sub_SReisby, id == ids[i] & week == j)$female
dep_mat[i, j+1] = subset(sub_SReisby, id == ids[i] & week == j)$reactive_depression
}
}
### Modelling (AR(1))
data = list(y = score_mat, x1 = imi_mat, x2 = dmi_mat, x3 = female_mat,
x4 = dep_mat, nrow = nrow(score_mat), ncol = ncol(score_mat),
p = 4)
model_string = "
model {
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (i in 1:nrow) {
for(k in 2:ncol){
y[i,k] ~ dnorm (mu + a1 * (y[i, (k-1)] - mu) +
x1[i, k] * b[1] + x2[i, k] * b[2] +
x3[i, k] * b[3] + x4[i, k] * b[4] +, tau) T(0,60)
}
}
mu ~ dnorm (0, 1E-6) T(0,60)
a1 ~ dnorm (0, 0.35^-2)
tau ~ dgamma (0.001, 0.001)
sd = pow (tau , -0.5)
}
"
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
### Modelling (AR(1))
data = list(y = score_mat, x1 = imi_mat, x2 = dmi_mat, x3 = female_mat,
x4 = dep_mat, nrow = nrow(score_mat), ncol = ncol(score_mat),
p = 4)
model_string = "
model {
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (i in 1:nrow) {
for(k in 2:ncol){
y[i,k] ~ dnorm (mu + a1 * (y[i, (k-1)] - mu) +
x1[i, k] * b[1] + x2[i, k] * b[2] +
x3[i, k] * b[3] + x4[i, k] * b[4], tau) T(0,60)
}
}
mu ~ dnorm (0, 1E-6) T(0,60)
a1 ~ dnorm (0, 0.35^-2)
tau ~ dgamma (0.001, 0.001)
sd = pow (tau , -0.5)
}
"
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
## Sampling
update(model, n.iter = 4000)
#samples = coda.samples(model, variable.names = c("mu", "a1", "sd",
#                                         "b"),
#                   n.iter = 1000 * 14, thin = 14)
ar1_dic = dic.samples(model, variable.names = c("mu", "a1", "sd",
"b"),
n.iter = 1000 * 14, thin = 14)
print(ar1_dic)
print(lin_dic)
library(knitr)
library(rjags)
library(plyr)
opts_chunk$set(echo = TRUE)
data = list(x = lin_x_scaled[,-1], y = y,
n = nrow(lin_x_scaled),
p = ncol(lin_x_scaled[,-1]),
n_subjects = length(unique(lin_x_scaled[,1])),
subject = lin_x_scaled$id)
# JAG model (as a string)
model_string = "
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (k in 1:n_subjects) {
c[k] ~ dnorm(0, tau_hier)
}
tau ~ dgamma(0.001, 0.001)
tau_hier ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
sd_hier = pow(tau_hier, -0.5)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau) T(0,60)
mu[i] = b0 + inprod(b, x[i,]) + c[subjects[i]]
}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
data = list(x = lin_x_scaled[,-1], y = y,
n = nrow(lin_x_scaled),
p = ncol(lin_x_scaled[,-1]),
n_subjects = length(unique(lin_x_scaled[,1])),
subject = lin_x_scaled$id)
# JAG model (as a string)
model_string = "
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (k in 1:n_subjects) {
c[k] ~ dnorm(0, tau_hier)
}
tau ~ dgamma(0.001, 0.001)
tau_hier ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
sd_hier = pow(tau_hier, -0.5)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau) T(0,60)
mu[i] = b0 + inprod(b, x[i,]) + c[subject[i]]
}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
as.numeric(paste(Reisby$id))
as.numeric(paste(Reisby$id))
(Reisby$id)
data = list(x = lin_x_scaled[,-1], y = y,
n = nrow(lin_x_scaled),
p = ncol(lin_x_scaled[,-1]),
n_subjects = length(unique(lin_x_scaled[,1])),
subject = lin_x_scaled$id)
# JAG model (as a string)
model_string = "
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (k in 1:n_subjects) {
c[subject[k]] ~ dnorm(0, tau_hier)
}
tau ~ dgamma(0.001, 0.001)
tau_hier ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
sd_hier = pow(tau_hier, -0.5)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau) T(0,60)
mu[i] = b0 + inprod(b, x[i,]) + c[subject[i]]
}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
ids = unique(lin_x_scaled[,1])
ids
x <- sample(1:length(ids))
x
x <- 1:length(ids)
x
y <- ids
y
y[y%in%names(x)] <- x[y[y%in%names(x)]]
y
y[y%in%names(x)] <- x[y[y%in%names(x)]]
y
y[y%in%names(x)] <- x[y[y%in%names(x)]]
y
x
x <- ids
x
y <- 1:length(ids)
names(y) <- ids
x[x%in%names(y)] <- y[x[x%in%names(y)]]
x
x
y
x[x%in%names(y)] <- y[x[x%in%names(y)]]
x
x <- sample(1:10, 8)
x
y <- c("A", "B", "C")
names(y) <- 1:3
x[x%in%names(y)] <- y[x[x%in%names(y)]]
x
x <- ids
x
y <- 1:length(ids)
y
names(y) <- ids
y
x
x = y[x]
x
y[]
y[101]
y[,101]
y[101,]
y['101']
y['101']
y$101
x <- ids
x
x = y['x']
x
x = y[ids]
x
x = ids
x['x'%in%names(y)] <- y['x'['x'%in%names(y)]]
x
x['x'%in%names(y)] <- y['x'['x'%in%names(y)]]
x
x['x'%in%names(y)] <- y['x'['x'%in%names(y)]]
x
y <-  ids
names(y) <- 1:length(ids)
x['x'%in%names(y)] <- y['x'['x'%in%names(y)]]
x
y <- 1:length(ids)
names(y) <- ids
x[x%in%names(y)] <- y[x['x'%in%names(y)]]
x[x%in%names(y)] <- y[x[x%in%names(y)]]
x
mapp = map(1:length(ids),ids)
mapp = setNames(1:length(ids),ids)
mapp
x = ids
x[] = mapp[x]
x
mapp = setNames(1:length(ids),ids)
x = ids
x[] = mapp[x]
x
mapp = setNames(1:length(ids),ids)
x[] = as.numeric(mapp[as.numeric(x)])
x
to = 1:length(ids)
from = ids
dd = ids
matrix(to[match(dd,from)], nrow=nrow(dd))
matrix(to[match(Reisby$id,from)], nrow=nrow(Reisby$id))
nrow(Reisby$id)
Reisby$id
matrix(to[match(Reisby$id,from)], nrow=length(Reisby$id))
ids <- as.factor(ids)
ids
levels(ids) <- 1:length(levels(ids))
ids
lin_x_scaled_h$ids = as.factor(lin_x_scaled)
levels(lin_x_scaled_h$ids) <- 1:length(levels(lin_x_scaled_h$ids))
lin_x_scaled_h = lin_x_scaled
lin_x_scaled_h$ids = as.factor(lin_x_scaled)
levels(lin_x_scaled_h$ids) <- 1:length(levels(lin_x_scaled_h$ids))
lin_x_scaled_h = lin_x_scaled
lin_x_scaled_h$id = as.factor(lin_x_scaled$id)
levels(lin_x_scaled_h$id) <- 1:length(levels(lin_x_scaled_h$id))
lin_x_scaled_h
lin_x_scaled_h = lin_x_scaled
lin_x_scaled_h$id = as.factor(lin_x_scaled$id)
levels(lin_x_scaled_h$id) <- 1:length(levels(lin_x_scaled_h$id))
data = list(x = lin_x_scaled_h[,-1], y = y,
n = nrow(lin_x_scaled),
p = ncol(lin_x_scaled_h[,-1]),
n_subjects = length(unique(lin_x_scaled[,1])),
subject = lin_x_scaled_h$id)
# JAG model (as a string)
model_string = "
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (k in 1:n_subjects) {
c[k] ~ dnorm(0, tau_hier)
}
tau ~ dgamma(0.001, 0.001)
tau_hier ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
sd_hier = pow(tau_hier, -0.5)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau) T(0,60)
mu[i] = b0 + inprod(b, x[i,]) + c[subject[i]]
}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
lin_x_scaled_h = lin_x_scaled
lin_x_scaled_h$id = as.factor(lin_x_scaled$id)
levels(lin_x_scaled_h$id) <- 1:length(levels(lin_x_scaled_h$id))
data = list(x = lin_x_scaled_h[,-1], y = y,
n = nrow(lin_x_scaled_h),
p = ncol(lin_x_scaled_h[,-1]),
n_subjects = length(unique(lin_x_scaled[,1])),
subject = lin_x_scaled_h$id)
# JAG model (as a string)
model_string = "
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (k in 1:n_subjects) {
c[k] ~ dnorm(0, tau_hier)
}
tau ~ dgamma(0.001, 0.001)
tau_hier ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
sd_hier = pow(tau_hier, -0.5)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau) T(0,60)
mu[i] = b0 + inprod(b, x[i,]) + c[subject[i]]
}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
nrow(lin_x_scaled_h)
lin_x_scaled_h$id
y
placebo = c(ifelse(Reisby$week == 0, 1, 0))
x = Reisby[,-2:-3]
x$placebo = placebo
y = Reisby[,2]
scaled_dmi = (Reisby$lnimi - mean(Reisby$lnimi))/sd(Reisby$lnimi)
scaled_imi = (Reisby$lndmi - mean(Reisby$lndmi))/sd(Reisby$lndmi)
lin_x_scaled = x[, -2:-3]
lin_x_scaled$scaled_dmi = scaled_dmi
lin_x_scaled$scaled_imi = scaled_imi
lin_x_scaled_h = lin_x_scaled
lin_x_scaled_h$id = as.factor(lin_x_scaled$id)
levels(lin_x_scaled_h$id) <- 1:length(levels(lin_x_scaled_h$id))
data = list(x = lin_x_scaled_h[,-1], y = y,
n = nrow(lin_x_scaled_h),
p = ncol(lin_x_scaled_h[,-1]),
n_subjects = length(unique(lin_x_scaled[,1])),
subject = lin_x_scaled_h$id)
# JAG model (as a string)
model_string = "
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
for (k in 1:n_subjects) {
c[k] ~ dnorm(0, tau_hier)
}
tau ~ dgamma(0.001, 0.001)
tau_hier ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
sd_hier = pow(tau_hier, -0.5)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau) T(0,60)
mu[i] = b0 + inprod(b, x[i,]) + c[subject[i]]
}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
update(model, n.iter = 1000)
samples = coda.samples(model,
variable.names = c("b0","sd","b", "sd_hier",
"c"),
n.iter = 1000 * 13, thin = 13)
dic_hie = dic.samples(model,
variable.names = c("b0","sd","b", "sd_hier",
"c"),
n.iter = 1000 * 13, thin = 13)
print(dic_hie)
library(knitr)
library(rjags)
library(plyr)
opts_chunk$set(echo = TRUE)
# Creates a table for DIC with a given caption
dic_table <- function(dic, caption) {
mean_dev = round(c(sum(dic$deviance)))
pen = round(c(sum(dic$penalty)), 2)
mean_pen_dev = round(c(mean_dev+pen))
dic.data = data.frame(mean_dev, pen, mean_pen_dev)
kable(dic.data, col.names =
c("Deviation", "Penalty", "Penalised Dev."),
caption = caption)
}
load("Reisby.RData")
Reisby = as.data.frame(Reisby)
hist(Reisby$hd, main = "Hamilton Index Scores Histogram",
xlab = "Hamilton Score")
# Replace x axis here with male/female axis
hist(Reisby$female, main = "Sex Histogram",
xlab = "Sex", xaxt = "n", ylim = c(0, 200))
axis(1, at=0:1, labels=c("Male","Female"))
hist(Reisby$reactive_depression, main = "Depression Type Histogram",
xlab = "Depression Type", xaxt = "n", ylim = c(0, 150))
axis(1, at=0:1, labels=c("Endogenous","Reactive"))
boxplot(Reisby$lnimi, Reisby$lndmi, main = "IMI and DMI Concentration Distributions",
ylab = "Log Concentraion")
axis(1, at=0:2, labels=c("IMI","IMI", "DMI")) # uses 3 labels due to strange bug
placebo = c(ifelse(Reisby$week == 0, 1, 0))
x = Reisby[,-2:-3]
x$placebo = placebo
y = Reisby[,2]
scaled_dmi = (Reisby$lnimi - mean(Reisby$lnimi))/sd(Reisby$lnimi)
scaled_imi = (Reisby$lndmi - mean(Reisby$lndmi))/sd(Reisby$lndmi)
lin_x_scaled = x[, -2:-3]
lin_x_scaled$scaled_dmi = scaled_dmi
lin_x_scaled$scaled_imi = scaled_imi
data = list(x = lin_x_scaled[,-1], y = y,
n = nrow(lin_x_scaled),
p = ncol(lin_x_scaled[,-1]))
# JAG model (as a string)
model_string = "
model {
b0 ~ dnorm(0, 1E-6)
for (j in 1:p) {
b[j] ~ dnorm(0, 1E-6)
}
tau ~ dgamma(0.001, 0.001)
sd = pow(tau, -0.5)
for (i in 1:n) {
y[i] ~ dnorm(mu[i], tau) T(0,60)
mu[i] = b0 + inprod(b, x[i,])
}
}
"
# model construction and sampling
model_tc = textConnection(model_string)
model = jags.model(model_tc, data = data, n.chains = 4)
# update(model, n.iter = 1000)
lin_samples = coda.samples(model,
variable.names = c("b0","sd","b"),
n.iter = 1000 * 1, thin = 1)
lin_dic = dic.samples(model,
variable.names = c("b0","sd","b"),
n.iter = 1000 * 1, thin = 1)
